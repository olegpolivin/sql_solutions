# 1
SELECT PC.model, PC.speed, PC.hd
FROM PC
WHERE PC.price < 500;

# 2
SELECT DISTINCT maker
FROM Product
WHERE type='Printer';

# 3
SELECT model, ram, screen
FROM Laptop
WHERE price > 1000

# 4
SELECT *
FROM Printer
WHERE color = 'y';

# 5
SELECT model, speed, hd
FROM PC
WHERE (cd = '12x' OR cd = '24x') AND price < 600;

# 6
SELECT DISTINCT maker, speed FROM
Product JOIN Laptop
ON Product.model = Laptop.model
WHERE hd>=10

# 7
with t as (
SELECT model, price FROM PC
UNION
SELECT model, price FROM Laptop
UNION
SELECT model, price FROM Printer),

producer_b as (
SELECT maker, model
FROM Product
WHERE maker = 'B')

SELECT t.model, price FROM
producer_b JOIN t
ON producer_b.model = t.model

# 8
SELECT maker
FROM Product
WHERE type in ('PC', 'Laptop')
EXCEPT
SELECT maker
FROM Product
WHERE type = 'Laptop'

# 9
SELECT DISTINCT maker
FROM Product
JOIN
(SELECT model
FROM PC
WHERE speed >= 450) Q
ON Product.model = Q.model

# 1O
SELECT model, price 
FROM Printer 
WHERE price = 
(SELECT MAX(price)
FROM Printer)

# 11
SELECT AVG(speed) as Avg_speed
FROM PC

# 12
SELECT AVG(speed) as Avg_speed
FROM Laptop
WHERE price > 1000

# 13
WITH T AS (
SELECT maker, model
FROM Product
WHERE maker = 'A')

SELECT AVG(speed)
FROM PC JOIN T
ON PC.model = T.model

# 14
SELECT Ships.class, Ships.name, country
FROM Ships JOIN Classes
ON Ships.class = Classes.class
WHERE Classes.numGuns >= 10

# 15
SELECT hd
FROM PC
GROUP BY hd
HAVING COUNT(*) >= 2

# 16
SELECT DISTINCT A.model as model, B.model as model, A.speed, A.ram
FROM PC as A, PC as B
WHERE A.model > B.model AND A.speed = B.speed AND A.ram = B.ram
ORDER BY A.model DESC, A.speed, A.ram

# 17
SELECT DISTINCT 'Laptop' as Type, model, speed
FROM Laptop
WHERE speed < ALL (SELECT speed FROM PC)

# 18
with query as
(SELECT model, price
FROM Printer
WHERE price = (SELECT MIN(price)
                           FROM Printer
                           WHERE color='y') AND color='y')
SELECT DISTINCT maker, price
FROM Product JOIN query
ON Product.model = query.model

# 19
SELECT maker, AVG(screen)
FROM Product JOIN Laptop 
ON Product.model = Laptop.model
GROUP BY maker

# 20
SELECT maker, COUNT(*)
FROM Product
GROUP BY maker, type
HAVING COUNT(*) >= 3 AND type = 'PC'

# 21
SELECT maker, MAX(Price) as Max_price
FROM PC JOIN Product
ON PC.model = Product.model
GROUP BY Product.maker

# 22
SELECT speed, AVG(price)
FROM PC
GROUP BY speed
HAVING speed > 600

# 23
SELECT maker
FROM Product JOIN PC
ON Product.model = PC.model
WHERE PC.speed >= 750
INTERSECT
SELECT maker
FROM Product JOIN Laptop
ON Product.model = Laptop.model
WHERE Laptop.speed >= 750

# 24
WITH Q AS (
SELECT model, PC.price
FROM PC
UNION
SELECT model, Laptop.price
FROM Laptop
UNION
SELECT model, Printer.price
FROM Printer
)

SELECT model
FROM Q
WHERE price = (SELECT MAX(price) FROM Q)

# 25
with MINRAM as (
SELECT model, speed
FROM PC
WHERE ram = (SELECT MIN(ram) FROM PC)),

MINRAMFAST as (
SELECT model
FROM MINRAM
WHERE speed = (SELECT MAX(speed) FROM MINRAM))

SELECT DISTINCT maker
FROM Product
WHERE type = 'Printer' and maker in ( SELECT maker
FROM Product JOIN MINRAMFAST
ON Product.model = MINRAMFAST.model)

# 26
with PCLAP AS (
SELECT model, price
FROM PC
UNION ALL
SELECT model, price
FROM Laptop)

SELECT AVG(price) as AVG_price
FROM Product JOIN PCLAP
ON Product.model = PCLAP.model
WHERE Product.maker = 'A'

# 27
with SUPERMAKER AS (
SELECT DISTINCT maker
FROM Product
WHERE type = 'PC'
INTERSECT
SELECT maker
FROM Product
WHERE type = 'Printer'),

PLAP AS (
SELECT maker, hd
FROM Product JOIN PC
ON Product.model = PC.model)

SELECT maker, AVG(hd) as Avg_hd
FROM PLAP
GROUP BY maker
HAVING maker in (SELECT maker FROM SUPERMAKER)

# 28
SELECT COUNT(*) AS Qty
FROM (SELECT maker
FROM Product
GROUP BY maker
HAVING COUNT(*) = 1) A

# 29
SELECT Income_o.point, Income_o.date, inc, out
FROM Income_o
LEFT JOIN Outcome_o
ON Income_o.date = Outcome_o.date AND income_o.point = outcome_o.point
UNION
SELECT Outcome_o.point, Outcome_o.date, inc, out
FROM Outcome_o
LEFT JOIN Income_o
ON Income_o.date = Outcome_o.date AND income_o.point = outcome_o.point

# 30
with INC as (
SELECT point, date, SUM(inc) as SINC
FROM Income
GROUP BY point, date),

OUT as (
SELECT point, date, SUM(out) as SOUT
FROM Outcome
GROUP BY point, date)

SELECT INC.point, INC.date, SOUT as Outcome, SINC as Income
FROM INC LEFT JOIN OUT
ON INC.date = OUT.date AND INC.point = OUT.point
UNION
SELECT OUT.point, OUT.date, SOUT as Outcome, SINC as Income
FROM OUT LEFT JOIN INC
ON INC.date = OUT.date AND INC.point = OUT.point

# 31
SELECT class, country
FROM Classes
WHERE bore >= 16
GROUP BY class, country

# 33
SELECT ship FROM Outcomes
WHERE battle = 'North Atlantic' AND result = 'sunk'

# 34 
SELECT name FROM 
Classes, Ships
WHERE Classes.class = Ships.class AND type = 'bb' AND launched >= 1922 AND displacement > 35000

# 35
SELECT model, type
from Product
WHERE model NOT LIKE '%[^0-9]%' OR model NOT LIKE '%[^a-z]%'

# 36
SELECT name
FROM Classes, Ships
WHERE Classes.class = Ships.name
UNION
SELECT class
FROM Classes, Outcomes
WHERE Classes.class = Outcomes.ship

# 38
SELECT country
FROM Classes
WHERE type='bb'
INTERSECT
SELECT country
FROM Classes
WHERE type='bc'

# 39
with Q as (
SELECT name, date, ship, battle, result
FROM Battles FULL JOIN Outcomes
ON Battles.name = Outcomes.battle
)

SELECT DISTINCT B.ship FROM Q A, Q B
WHERE A.result = 'damaged' AND A.ship = B.ship AND A.date < B.date

# 40
with T AS (
SELECT maker, COUNT(type) AS C
FROM (
SELECT maker, type
FROM Product
WHERE maker in (
SELECT maker
FROM Product
GROUP BY maker
HAVING COUNT(model) > 1)
GROUP BY maker, type) Q
GROUP BY maker
HAVING COUNT(*) = 1
) 

SELECT DISTINCT maker, type
FROM Product
WHERE maker in (SELECT maker FROM T)

OR

SELECT maker,max(type) type FROM [Product]
group by maker having count(*)> 1 and max(type)=min(type)

# 41
with Q as (
SELECT maker, price
FROM Product JOIN PC
ON Product.model = PC.model
UNION
SELECT maker, price
FROM Product JOIN Laptop
ON Product.model = Laptop.model
UNION
SELECT maker, price
FROM Product JOIN Printer
ON Product.model = Printer.model
),

M as (
SELECT maker, max(price) as MP
FROM Q
GROUP BY maker),

N as (
SELECT DISTINCT maker
FROM Q
WHERE price IS NULL)
SELECT maker,
CASE
WHEN maker in (SELECT maker FROM N)
THEN Null
ELSE M.MP
END Z
FROM M

# 42
SELECT ship, battle
FROM Outcomes
WHERE result = 'sunk'

# 43
with Launched AS (
SELECT DISTINCT launched
FROM Ships
WHERE Launched IS NOT Null)

SELECT name
FROM Battles
WHERE YEAR(date) NOT IN (SELECT launched from Launched)

# 44
SELECT name 
FROM
(
SELECT name
FROM Ships
UNION
SELECT ship
FROM Outcomes) Q
WHERE name LIKE 'R%'

# 45
SELECT name 
FROM (
SELECT name
FROM Ships
UNION
SELECT ship
FROM Outcomes) Q1
WHERE name LIKE '% % %'

# 48
with SUNK as (
SELECT DISTINCT ship
FROM Outcomes
WHERE result = 'sunk')

SELECT class
FROM Ships
WHERE name in (SELECT ship FROM SUNK)
UNION
SELECT class
FROM Classes 
WHERE class in (SELECT ship FROM SUNK);

# 49
SELECT name
FROM (
SELECT Classes.class, name
FROM Classes JOIN Ships
ON Classes.class = Ships.class
WHERE bore = 16
UNION
SELECT Classes.class, ship
FROM Classes JOIN Outcomes
ON Classes.class = Outcomes.ship
WHERE bore = 16) A

# 50
with S AS (
SELECT Ships.name, Classes.class
FROM Ships
JOIN Classes
ON Classes.class = Ships.class),

S2 AS (
SELECT name, class, battle
FROM S LEFT JOIN Outcomes
ON S.name = Outcomes.ship)

SELECT DISTINCT Battles.name
FROM Battles JOIN S2
ON Battles.name = S2.battle
WHERE S2.class = 'Kongo'

# 51
VERY LONG WAY
with Q1 AS (
SELECT Classes.class, numGuns, displacement, Outcomes.ship as name
FROM Classes JOIN Outcomes
ON Classes.class = Outcomes.ship),

Q2 AS (
SELECT Classes.class, numGuns, displacement, Ships.name
FROM Classes JOIN Ships
ON Classes.class = Ships.class),

Q3 AS (
SELECT * FROM Q1
UNION
SELECT * FROM Q2),

Q4 AS (
SELECT B.name, B.numGuns, B.displacement
FROM Q3 A, Q3 B
WHERE A.displacement = B.displacement),

Q5 AS (
SELECT max(numGuns) as MG, displacement as D
FROM Q4
GROUP BY displacement)

SELECT DISTINCT name
FROM Q4 LEFT JOIN Q5
ON Q4.displacement = Q5.D
WHERE numGuns = MG

# 53
SELECT CAST(AVG(1.00*numGuns) AS decimal(8,2)) as Avg_numGuns
FROM Classes
GROUP BY type
HAVING type ='bb'

# 65
with Q1 AS (
SELECT *, 
CASE
WHEN type = 'PC' THEN 1
WHEN type = 'Laptop' THEN 2
ELSE 3 END 
Ordr
FROM Product),

Q2 AS (
SELECT *, DENSE_RANK() OVER (ORDER BY maker, Ordr) AS num
FROM Q1),

Q3 AS (
SELECT DISTINCT num, maker, type FROM Q2),

Q4 AS (
SELECT *, ROW_NUMBER() OVER (PARTITION BY maker ORDER BY num) as C
FROM Q3
)

SELECT num, 
CASE
WHEN C > 1 THEN ''
ELSE maker
END maker, type
FROM Q4

